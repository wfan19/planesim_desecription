<?xml version="1.0"?>
<robot name="planesil" xmlns:xacro="http://www.ros.org/wiki/xacro">
    <xacro:include filename="$(find planesim_description)/urdf/materials.xacro" />
    <xacro:include filename="$(find planesim_description)/urdf/macros.xacro" />
    
    <xacro:property name="PI" value="3.14" />

    <xacro:property name="bodyY" value="0.5" />
    <xacro:property name="bodyX" value="6" />
    <xacro:property name="bodyZ" value="0.5" />
    <xacro:property name="bodyMass" value="100" />

    <xacro:property name="wingY" value="5" />
    <xacro:property name="wingX" value="1" />
    <xacro:property name="wingZ" value="${bodyZ/4}" />
    <xacro:property name="wingMass" value="50" />

    <xacro:property name="landingGearY" value="${bodyY}" />
    <xacro:property name="landingGearX" value="0.125" />
    <xacro:property name="landingGearZ" value="1" />
    <xacro:property name="landingGearMass" value="10" />

    <xacro:property name="wheelWidth" value="0.1 "/>
    <xacro:property name="wheelRadius" value="0.25 "/>
    <xacro:property name="wheelMass" value="5" />

    <xacro:property name="propellerBlockX" value="0.25" />
    <xacro:property name="propellerBlockY" value="${bodyY/2}" />
    <xacro:property name="propellerBlockZ" value="${bodyZ/2}" />
    <xacro:property name="propellerBlockMass" value="5" />

    <xacro:property name="propellerX" value="1.5" />      <!-- Length of blade -->
    <xacro:property name="propellerY" value="0.2" />   <!-- Width of blade -->
    <xacro:property name="propellerZ" value="0.1" />    <!-- Thickness of blade -->
    <xacro:property name="propellerMass" value="2" />

    <xacro:property name="elevatorX" value="${wingX/3}" />
    <xacro:property name="elevatorY" value="${wingY/2}" />
    <xacro:property name="elevatorZ" value="${wingZ}" />
    <xacro:property name="elevatorMass" value="125" />

    <!-- X axis is down the runway -->
    <!-- Y axis is to the left of the runway, looking down -->
    <!-- Z axis is up -->

    <link name="body">
        <inertial>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <mass value="${bodyMass}"/>
            <xacro:box_inertia m="${bodyMass}" x="${bodyX}" y="${bodyY}" z="${bodyZ}"/>
        </inertial>

        <collision> 
            <origin xyz="0 0 0" rpy="0 0 0"/> 
            <geometry> 
                <box size="${bodyX} ${bodyY} ${bodyZ}"/> 
            </geometry> 
        </collision>

        <visual> 
            <origin xyz="0 0 0" rpy="0 0 0"/> 
            <geometry> 
                <box size="${bodyX} ${bodyY} ${bodyZ}"/> 
            </geometry> 
            <material name="orange"/>
        </visual>
    </link>

    <gazebo reference="body">
        <material>Gazebo/Gray</material>
    </gazebo>

    <link name="base_link"/>
    <joint name="base_joint" type="fixed">
        <parent link="base_link"/>
        <child link="body"/>
    </joint>

    <xacro:wing name="left" left="1"/>
    <xacro:wing name="right" left="-1"/>

    <xacro:landingGear name="front" front="1"/>
    <xacro:landingGear name="back" front="-1"/>

    <xacro:wheel name="frontLeft_wheel" front="1" left="1" />
    <xacro:wheel name="frontRight_wheel" front="1" left="-1" />
    <xacro:wheel name="backLeft_wheel" front="-1" left="1" />
    <xacro:wheel name="backRight_wheel" front="-1" left="-1" />

    <link name="propellerBlock">
        <inertial>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <mass value="${propellerBlockMass}"/>
            <xacro:box_inertia m="${propellerBlockMass}" x="${propellerBlockX}" y="${propellerBlockY}" z="${propellerBlockZ}"/>
        </inertial>

        <collision> 
            <origin xyz="0 0 0" rpy="0 0 0"/> 
            <geometry> 
                <box size="${propellerBlockX} ${propellerBlockY} ${propellerBlockZ}"/> 
            </geometry> 
        </collision>

        <visual> 
            <origin xyz="0 0 0" rpy="0 0 0"/> 
            <geometry> 
                <box size="${propellerBlockX} ${propellerBlockY} ${propellerBlockZ}"/> 
            </geometry> 
            <material name="orange"/>
        </visual>
    </link>

    <gazebo reference="propellerBlock">
        <material>Gazebo/Orange</material>
    </gazebo>

    <joint name="propellerBlock_joint" type="fixed">
        <parent link="body"/>
        <child link="propellerBlock"/>
        <origin xyz="${bodyX/2 + propellerBlockX/2} 0 0" rpy="0 0 0"/>
    </joint>

    <link name="propeller">
        <inertial>
            <origin xyz="0 0 0" rpy="0 ${PI/2} 0"/>
            <mass value="${propellerMass}"/>
            <xacro:box_inertia m="${propellerMass}" x="${propellerX}" y="${propellerY}" z="${propellerZ}"/>
        </inertial>

        <collision> 
            <origin xyz="0 0 0" rpy="0 ${PI/2} 0"/>
            <geometry> 
                <box size="${propellerX} ${propellerY} ${propellerZ}"/> 
            </geometry> 
        </collision>

        <visual> 
            <origin xyz="0 0 0" rpy="0 ${PI/2} 0"/>
            <geometry> 
                <box size="${propellerX} ${propellerY} ${propellerZ}"/> 
            </geometry> 
            <material name="blue"/>
        </visual>
    </link>

    <gazebo reference="propeller">
        <material>Gazebo/Blue</material>
        <kp>1000000</kp>
        <kd>1000000</kd>
        <mu1>10.0</mu1>
        <mu2>10.0</mu2>
    </gazebo>

    <joint name="propeller_joint" type="continuous">
        <parent link="propellerBlock" />
        <child link="propeller" />
        <origin xyz="${propellerBlockX/2 + propellerZ/2} 0 0" rpy="0 0 0"/>
    </joint>

    <xacro:joint_transmission joint_name="propeller"/>

    <link name="elevator">
        <inertial>
            <origin xyz="0 0 0" rpy="0 0 0"/> 
                <mass value="${elevatorMass}"/>
                <xacro:box_inertia m="${elevatorMass}" x="${elevatorX}" y="${elevatorY}" z="${elevatorZ}"/>
            </inertial>

            <collision> 
                <origin xyz="0 0 0" rpy="0 0 0"/>  
                <geometry> 
                    <box size="${elevatorX} ${elevatorY} ${elevatorZ}"/> 
                </geometry> 
            </collision>

            <visual> 
                <origin xyz="0 0 0" rpy="0 0 0"/> 
                <geometry> 
                    <box size="${elevatorX} ${elevatorY} ${elevatorZ}"/> 
                </geometry> 

                <material name="blue"/>
            </visual>
    </link>

    <gazebo reference="elevator">
        <material>Gazebo/Blue</material>
    </gazebo>

    <joint name="elevator_joint" type="fixed">
        <parent link="body" />
        <child link="elevator" />
        <origin xyz="${-bodyX/2 + elevatorX/2} 0 0" rpy="0 0 0" />
    </joint>

    <link name="elevator_controlsurface">
        <inertial>
            <origin xyz="${-elevatorX/10} 0 0" rpy="0 0 0"/> 
            <mass value="${elevatorMass/5}"/>
            <xacro:box_inertia m="${elevatorMass/5}" x="${elevatorX/3}" y="${elevatorY}" z="${elevatorZ/2}"/>
        </inertial>

        <collision> 
            <origin xyz="${-elevatorX/10} 0 0" rpy="0 0 0"/>  
            <geometry> 
                    <box size="${elevatorX/5} ${elevatorY} ${elevatorZ}"/> 
            </geometry> 
        </collision>

        <visual> 
            <origin xyz="${-elevatorX/10} 0 0" rpy="0 0 0"/> 
            <geometry> 
                <box size="${-elevatorX/3} ${elevatorY} ${elevatorZ/2}"/> 
            </geometry> 

            <material name="blue" />
        </visual>
    </link>

    <joint name="elevator_controlsurface_joint" type="continuous">
        <parent link="elevator" />
        <child link="elevator_controlsurface" />
        <origin xyz="${-elevatorX/2} 0 0" rpy="0 0 0" />
        <axis xyz="0 1 0" rpy="0 0 0" />
    </joint>

    <joint_transmission joint_name="elevator_controlsurface" reduction="100"/>

    <xacro:sphere_marker 
        name="leftWingCP"
        markerX="0"
        markerY="${wingY/2}"
        markerZ="${wingZ/2}"
    />

    <xacro:sphere_marker 
        name="rightWingCP"
        markerX="0"
        markerY="${-wingY/2}"
        markerZ="${wingZ/2}"
    />

    <xacro:sphere_marker 
        name="elevatorCP"
        markerX="${-bodyX/2 + -elevatorX/2}"
        markerY="0"
        markerZ="${elevatorZ/2}"
    />

    <gazebo>
        <plugin name="propellerTopBlade" filename="libLiftDragPlugin.so">
            <a0>0.4</a0>
            <cla>4.752798721</cla>
            <cda>0.6417112299</cda>
            <cma>0</cma>
            <alpha_stall>1.5</alpha_stall>
            <cla_stall>-3.85</cla_stall>
            <cda_stall>-0.9233984055</cda_stall>
            <cma_stall>0</cma_stall>
            <air_density>1</air_density>
            <cp> ${propellerZ/2} 0 ${propellerX/4} </cp>
            <area>${propellerX * propellerY / 2}</area>
            <forward> 0 1 0 </forward>
            <upward> 1 0 0</upward>
            <link_name>propeller</link_name>
        </plugin>

        <plugin name="propellerBottomBlade" filename="libLiftDragPlugin.so">
            <a0>0.4</a0>
            <cla>4.752798721</cla>
            <cda>0.6417112299</cda>
            <cma>0</cma>
            <alpha_stall>1.5</alpha_stall>
            <cla_stall>-3.85</cla_stall>
            <cda_stall>-0.9233984055</cda_stall>
            <cma_stall>0</cma_stall>
            <air_density>1</air_density>
            <cp> ${propellerZ/2} 0 ${-propellerX/4} </cp>
            <area> 0.5 </area>
            <forward> 0 -1 0 </forward>
            <upward> 1 0 0 </upward>
            <link_name>propeller</link_name>
        </plugin>

        <plugin name="leftWing" filename="libplanesim_liftdrag.so">
            <a0>0.05984281113</a0>
            <cla>4.752798721</cla>
            <cda>0.6417112299</cda>
            <cma>-1.8</cma>
            <alpha_stall>0.3391428111</alpha_stall>
            <cla_stall>-3.85</cla_stall>
            <cda_stall>-0.9233984055</cda_stall>
            <cma_stall>0</cma_stall>
            <air_density> 2 </air_density>
            <cp> 0 ${wingY/2} ${wingZ/2}</cp>
            <area> ${(wingX/2) * (wingY/2)}</area>
            <forward> 1 0 0 </forward>
            <upward> 0 0 1 </upward>
            <link_name>base_link</link_name>
            <control_joint_name>left_controlsurface_joint</control_joint_name>
            <control_joint_rad_to_cl>-2.0</control_joint_rad_to_cl>
        </plugin>

        <plugin name="rightWing" filename="libplanesim_liftdrag.so">
            <a0>0.05984281113</a0>
            <cla>4.752798721</cla>
            <cda>0.6417112299</cda>
            <cma>-1.8</cma>
            <alpha_stall>0.3391428111</alpha_stall>
            <cla_stall>-3.85</cla_stall>
            <cda_stall>-0.9233984055</cda_stall>
            <cma_stall>0</cma_stall>
            <air_density> 2 </air_density>
            <cp> 0 ${-wingY/2} ${wingZ/2}</cp>
            <area> ${(wingX/2) * (wingY/2)}</area>
            <forward> 1 0 0 </forward>
            <upward> 0 0 1 </upward>
            <link_name>base_link</link_name>
            <control_joint_name>right_controlsurface_joint</control_joint_name>
            <control_joint_rad_to_cl>-2.0</control_joint_rad_to_cl>
        </plugin>

        <plugin name="elevator" filename="libplanesim_liftdrag.so">
            <a0>0.05984281113</a0>
            <cla>4.752798721</cla>
            <cda>0.6417112299</cda>
            <cma>-1.8</cma>
            <alpha_stall>0.3391428111</alpha_stall>
            <cla_stall>-3.85</cla_stall>
            <cda_stall>-0.9233984055</cda_stall>
            <cma_stall>0</cma_stall>
            <air_density> 2 </air_density>
            <cp> ${-bodyX/2 + -elevatorX/2} 0 ${elevatorZ/2}</cp>
            <area> ${(elevatorX/2) * (elevatorY/2)}</area>
            <forward> 1 0 0 </forward>
            <upward> 0 0 1 </upward>
            <link_name>base_link</link_name>
            <control_joint_name>elevator_controlsurface_joint</control_joint_name>
            <control_joint_rad_to_cl>-2.0</control_joint_rad_to_cl>
        </plugin>

        <!-- <plugin name="ForceTester_left" filename="libgazebo_forcetest_plugin.so">
            <name>left_wing</name>
            <targetPoint>0 ${wingY/2} 0</targetPoint>
            <link_name>base_link</link_name>
        </plugin>

        <plugin name="ForceTester_right" filename="libgazebo_forcetest_plugin.so">
            <name>right_wing</name>
            <targetPoint>0 ${-wingY/2} 0</targetPoint>
            <link_name>base_link</link_name>
        </plugin> -->
        
    </gazebo>

    <gazebo>
        <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
            <robotNamespace>/planesim</robotNamespace>
        </plugin>
    </gazebo>

</robot>